package ui

import (
    "fmt"
    "strings"

    "github.com/google/uuid"
)

templ formPad() {
    <div class="h-2"/>
}

templ formLabel(label, name string) {
    <label for={ name } class="block mb-1">{ label }</label>
}

templ formError() {
    <div id="form-error" class="text-right text-sm text-red-800"/>
}

templ formSubmit() {
    <input type="submit" value="Submit" class="block ml-auto px-2 py-1 border border-gray-500 hover:cursor-pointer active:underline"/>
}

func formatUUID(value uuid.UUID, shorten bool) string {
    str := value.String()
    if shorten {
        str, _, _ = strings.Cut(str, "-")
    }
    return str
}

templ accountName(name, class string) {
    <a href={ templ.SafeURL(fmt.Sprintf("/user/%s", name)) } class={ class }>{ name }</a>
}

func maybeBlankText(text string) string {
    if text == "" {
        return "â€”"
    }
    return text
}

templ uploadButton(targetSelector, callback string) {
    {{ onChange := templ.JSUnsafeFuncCall(fmt.Sprintf("uploadFile(event.target, '%s').then(() => { %s })", targetSelector, callback)) }}

    <label for="upload" class="px-2 text-sm hover:cursor-pointer">Upload</label>
    <input type="file" id="upload" class="sr-only" onchange={ onChange }/>
}

templ utilsScript() {
    <script>
        function toggleClass(selector, cls) {
            let elem = document.querySelector(selector)
            if (elem.classList.contains(cls)) {
                elem.classList.remove(cls)
            } else {
                elem.classList.add(cls)
            }
        }

        // TODO: better tokenization
        function splitContent(content) {
            let tokens = []
            let lines = content.split('\n')
            for (line of lines) {
                for (token of line.split(/\s+/)) {
                    if (token.length > 0) {
                        tokens.push(token)
                    }
                }
                tokens.push('\n')
            }
            return tokens
        }

        function updateDiff(diffElem, contentLeft, contentRight) {
            let tokLeft = splitContent(contentLeft)
            let tokRight = splitContent(contentRight)
            let diff = patienceDiff(tokLeft, tokRight)

            diffElem.textContent = ''
            let lastTok = null
            let lastSign = 0

            for (line of diff.lines) {
                let sign = 0
                if (line.aIndex < 0) {
                    sign = 1
                }
                if (line.bIndex < 0) {
                    sign = -1
                }

                let tok = lastTok
                if (tok == null || sign != lastSign) {
                    tok = document.createElement('span')
                    if (sign > 0) {
                        tok.classList.add('bg-green-100')
                    } else if (sign < 0) {
                        tok.classList.add('bg-red-100')
                    }
                    diffElem.append(tok)
                    diffElem.append(' ')
                } else {
                    tok.textContent += ' '
                }

                tok.textContent += line.line
                lastTok = tok
                lastSign = sign
            }
        }

        async function uploadFile(input, targetSelector) {
            let target = document.querySelector(targetSelector)
            let text = ""
            if (input.files.length > 0) {
                text = await input.files[0].text()
            }
            target.value = text
        }
    </script>
}
