package ui

import (
    "fmt"
    "strings"
    "time"

    "github.com/google/uuid"

    "github.com/ffsgfy/hawloom/internal/api"
    "github.com/ffsgfy/hawloom/internal/db"
    "github.com/ffsgfy/hawloom/internal/utils"
)

templ newDocPage() {
    <form hx-post="" hx-target="#form-error" class="flex flex-row m-auto">
        <div class="w-2xl">
            @formLabel("Content", "content")
            <textarea id="content" name="content" class="block w-full h-124 p-3 resize-y font-mono text-sm break-all"/>
        </div>
        <span class="w-4"/>
        <div class="w-md">
            @formLabel("Title", "title")
            <input type="text" id="title" name="title" class="w-full p-2"/>
            @formPad()
            @formLabel("Description", "description")
            <textarea id="description" name="description" class="block w-full h-30 p-3 resize-y font-mono text-sm break-all"/>
            @formPad()
            @formLabel("Settings", "")
            @formPad()
            <div class="pl-4 border-l border-l-gray-500">
                <div class="grid grid-cols-[repeat(2,_max-content)] gap-x-4 gap-y-2 items-center text-sm">
                    @formLabel("Voting round:", "vduration")
                    <span>
                        <input type="number" id="vduration" name="vduration" class="w-18 p-1 mr-1 text-sm" value="120"/> seconds
                    </span>
                    @formLabel("Voting mode:", "vmode")
                    <select id="vmode" name="vmode" class="p-1 text-sm">
                        <option value="selection">Selection</option>
                        <option value="approval">Approval</option>
                    </select>
                </div>
                @formPad()
                <div class="flex flex-row w-full items-center text-sm">
                    <input type="checkbox" id="public" name="public" value="true">
                    <label for="public" class="ml-2">Public visibility</label>
                </div>
                @formPad()
                <div class="flex flex-row w-full items-center text-sm">
                    <input type="checkbox" id="majority" name="majority" value="true">
                    <label for="majority" class="ml-2">Majority requirement</label>
                </div>
            </div>
            @formPad()
            @formError()
            @formPad()
            @formSubmit()
            <!-- TODO: tooltips -->
        </div>
    </form>
}

templ NewDocPage() {
    @PageWrapper("Hawloom - New Document", PageHeader(), newDocPage())
}

templ docViewButton(view string, active, dummy bool) {
    {{
        class := "px-2"
        if active {
            class += " underline"
        } else if dummy {
            class += " text-gray-500"
        }
        if !dummy {
            class += " hover:cursor-pointer"
        }
    }}

    if dummy {
        <span class={ class }>{ view }</span>
    } else {
        <span id={ fmt.Sprintf("btn-%s", view) } class={ class } onclick={ templ.JSFuncCall("updateView", view) }>{ view }</span>
    }
}

templ docViewButtons() {
    <span id="btns-normal" class="hidden">
        @docViewButton("current", true, false)
        |
        @docViewButton("selected", false, false)
        |
        @docViewButton("diff", false, false)
    </span>
    <span id="btns-dummy">
        @docViewButton("current", true, true)
        |
        @docViewButton("selected", false, true)
        |
        @docViewButton("diff", false, true)
    </span>
}

templ docViewContent(view string, content string) {
    <div id={ "txt-" + view } class="h-124 overflow-y-scroll p-3 resize-y font-mono text-sm whitespace-pre-line break-all border border-gray-500" hx-swap-oob="true">
        { content }
    </div>
}

templ docViewContainer(view string, content string, active bool) {
    <div id={ "cnt-" + view } if !active { class="hidden" }>
        @docViewContent(view, content)
    </div>
}

templ docDetailsButton(subj string) {
    <span id={ fmt.Sprintf("btn-%s", subj) } class="px-2 hover:cursor-pointer" onclick={ templ.JSFuncCall("toggleDetails", subj) }>{ subj }</span>
}

templ docDetailsButtons() {
    @docDetailsButton("document")
    |
    @docDetailsButton("version")
}

func docVotingMode(doc *db.Doc) string {
    if utils.TestFlags(doc.Flags, api.DocFlagApproval) {
        return "approval"
    }
    return "selection"
}

func docFlags(doc *db.Doc) string {
    var items []string
    if utils.TestFlags(doc.Flags, api.DocFlagPublic) {
        items = append(items, "public")
    }
    if utils.TestFlags(doc.Flags, api.DocFlagMajority) {
        items = append(items, "majority")
    }
    return strings.Join(items, ", ")
}

templ docDetailsContainer(doc *db.Doc, docAuthor string, hidden bool) {
    <div id="doc" if hidden { class="hidden" }>
        @formPad()
        <div class="grid grid-cols-[max-content_1fr] gap-x-4 gap-y-1 text-sm pl-4 border-l border-l-gray-500">
            <span>Document:</span>
            <span>
                <a href={ templ.SafeURL(fmt.Sprintf("/doc/%v", doc.ID)) }>
                    { formatUUID(doc.ID, false) }
                </a>
            </span>

            <span>Author:</span>
            <span>@accountName(docAuthor, "")</span>

            <span>Voting round:</span>
            <span>{ fmt.Sprintf("%d seconds", doc.VordDuration) }</span>

            <span>Voting mode:</span>
            <span>{ docVotingMode(doc) }</span>

            <span>Flags:</span>
            <span>{ docFlags(doc) }</span>
        </div>
    </div>
}

templ docIDField(docID uuid.UUID) {
    <input type="text" id="doc-id" name="doc-id" class="hidden" value={ docID.String() }/>
}

templ docVordNumField(vord *db.Vord) {
    <input type="number" id="vord-num" name="vord-num" class="hidden" value={ fmt.Sprint(vord.Num) }/>
}

templ docVordNumArrow(docID uuid.UUID, vordNum int32, right bool) {
    {{
        arrow := "<"
        if right {
            arrow = ">"
        }
    }}

    <a href={ templ.SafeURL(fmt.Sprintf("/doc/%v/%d", docID, vordNum)) } class="px-1 hover:cursor-pointer">{ arrow }</a>
}

templ docVordNum(vordNum int32) {
    <span class="underline px-1">{ fmt.Sprint(vordNum) }</span>
}

func docVordExtensionReason(flags api.VordFlags) string {
    if flags == 0 {
        return ""
    }

    if utils.TestFlags(flags, api.VordFlagError) {
        return "internal error"
    } else if utils.TestFlags(flags, api.VordFlagTie) {
        return "tie in votes"
    } else if utils.TestFlags(flags, api.VordFlagNoMajority) {
        return "no majority"
    } else if utils.TestFlags(flags, api.VordFlagNoVotes) {
        return "no votes"
    }

    return "unknown reason"
}

templ DocVordTimer(vord *db.Vord) {
    {{ timer := max(int(vord.FinishAt.Sub(time.Now()).Seconds()), 0) }}

    Time remaining:
    <span id="timer-num">
        { fmt.Sprint(timer) }
    </span>

    if vord.Num < 0 {
        if timer > 0 {
            if reason := docVordExtensionReason(api.VordFlags(vord.Flags)); reason != "" {
                (extended: { reason })
            }
        } else {
            (awaiting commit)
        }
    }
}

templ docVordDisplay(curVer *db.Ver, vord *db.Vord) {
    <div class="flex flex-row items-center">
        Round:
        <span class="w-1"/>
        if vord.Num < 0 {
            @docVordNumArrow(curVer.Doc, curVer.VordNum, false)
            @docVordNum(curVer.VordNum + 1)
        } else {
            if vord.Num > 0 {
                @docVordNumArrow(curVer.Doc, vord.Num - 1, false)
            }
            @docVordNum(vord.Num)
            @docVordNumArrow(curVer.Doc, vord.Num + 1, true)
        }

        <span class="flex-1"/>
        <span id="timer" class="text-sm hover:cursor-pointer" hx-get={ fmt.Sprintf("/doc/%v/timer?start=%d", vord.Doc, vord.StartAt.Unix()) }>
            @DocVordTimer(vord)
        </span>
    </div>
    @docVordNumField(vord)
}

templ docDescription(text string) {
    <div id="description" class="max-h-30 overflow-y-scroll p-3 font-mono text-sm whitespace-pre-line break-all border border-gray-500">
        { text }
    </div>
}

templ docScript() {
    <script>
        const views = ['current', 'selected', 'diff']

        function updateView(selView) {
            if (document.querySelector('#ver-sel-id').value.length > 0) {
                document.querySelector('#btns-normal').classList.remove('hidden')
                document.querySelector('#btns-dummy').classList.add('hidden')
            } else {
                document.querySelector('#btns-normal').classList.add('hidden')
                document.querySelector('#btns-dummy').classList.remove('hidden')
            }

            let curView = ''
            let curHeight = 0
            for (view of views) {
                if (!document.querySelector('#cnt-' + view).classList.contains('hidden')) {
                    curView = view
                    curHeight = document.querySelector('#txt-' + view).offsetHeight
                    break
                }
            }

            if (selView == 'alternate') {
                if (curView == 'current') {
                    selView = 'selected'
                } else {
                    selView = curView
                }
            }

            if (selView == 'current') {
                document.querySelector('#ver-cur').classList.remove('hidden')
                document.querySelector('#ver-sel').classList.add('hidden')
                document.querySelector('#btns-ver').classList.add('hidden')
            } else {
                document.querySelector('#ver-cur').classList.add('hidden')
                document.querySelector('#ver-sel').classList.remove('hidden')
                document.querySelector('#btns-ver').classList.remove('hidden')
            }

            if (selView == 'diff') {
                updateDiff(
                    document.querySelector('#txt-diff'),
                    document.querySelector('#txt-current').innerHTML,
                    document.querySelector('#txt-selected').innerHTML,
                )
            }

            for (view of views) {
                document.querySelector('#cnt-' + view).classList.add('hidden')
                document.querySelector('#btn-' + view).classList.remove('underline')
            }

            document.querySelector('#cnt-' + selView).classList.remove('hidden')
            document.querySelector('#txt-' + selView).style['height'] = curHeight + 'px'
            document.querySelector('#btn-' + selView).classList.add('underline')
        }

        function toggleDetails(subj) {
            toggleClass('#btn-' + subj, 'underline')
            if (subj == 'document') {
                toggleClass('#doc', 'hidden')
            } else if (subj == 'version') {
                toggleClass('#ver', 'hidden')
            }
        }

        document.addEventListener('htmx:afterRequest', function(evt) {
            let target = evt.detail.target.id
            if (target == 'ver-sel') {
                updateView('alternate')
            } else if (target == 'btn-vote-unvote') {
                htmx.trigger('#btn-versions', 'click', {})
                htmx.ajax('GET', '/ver/' + document.querySelector('#ver-sel-id').value, '#ver-sel')
            }
        })
    </script>
}

templ docTimerScript(docID uuid.UUID) {
    <script>
        window.setInterval(() => {
            let numElem = document.querySelector('#timer-num')
            let num = parseInt(numElem.innerHTML)
            if (num > 0) {
                num -= 1
                numElem.innerHTML = num.toString()
                if (num == 0) {
                    timerRefreshAt = Date.now() + 2000
                }
            } else {
                htmx.trigger('#timer', 'click', {})
            }
        }, 1000)
    </script>
}

templ docPage(doc *db.Doc, docAuthor string, curVer *db.Ver, curVerAuthor string, selVer *uuid.UUID, vord *db.Vord) {
    if vord.Num < 0 {
        @docTimerScript(doc.ID)
    }

    <div class="flex flex-row m-auto">
        <div class="w-2xl">
            <div class="flex flex-row items-center mb-1">
                View:
                @docViewButtons()

                {{
                    active := false
                    if vord.Num < 0 {
                        if authToken, _ := api.GetValidAuthToken(ctx); authToken != nil {
                            active = true
                        }
                    }

                    class := "text-sm"
                    if !active {
                        class += " hidden"
                    }
                }}
                <span class="flex-1"/>
                <span class={ class }>
                    @verButtonsStub()
                </span>
            </div>
            @docViewContainer("current", curVer.Content, true)
            @docViewContainer("selected", "", false)
            @docViewContainer("diff", "", false)

            @formPad()
            @docVordDisplay(curVer, vord)
        </div>
        <span class="w-4"/>
        <div class="w-md">
            @docIDField(doc.ID)
            @verSelIDField(selVer)

            <div class="mb-1">
                { doc.Title }
            </div>
            @docDescription(doc.Description)

            @formPad()
            <div class="text-sm">
                Show details:
                @docDetailsButtons()
            </div>
            @docDetailsContainer(doc, docAuthor, true)
            @verDetailsContainer(curVer, curVerAuthor, selVer, true)

            @verListHead(doc.ID, vord.Num)
            @verListStub()
        </div>
    </div>
}

templ DocPage(doc *db.Doc, docAuthor string, curVer *db.Ver, curVerAuthor string, selVer *uuid.UUID, vord *db.Vord) {
    @PageWrapper("Hawloom - " + formatUUID(doc.ID, true), PageHeader(), utilsScript(), docScript(), docPage(doc, docAuthor, curVer, curVerAuthor, selVer, vord))
}

type DocRow struct {
	ID          uuid.UUID
	Title       string
	Description string
	Author      string
}

templ docListRow(docRow *DocRow, withAuthor bool) {
    <tr class="align-top">
        <td class="p-1 border-t border-t-gray-500">
            <a href={ templ.SafeURL(fmt.Sprintf("/doc/%v", docRow.ID)) }>
                { formatUUID(docRow.ID, true) }
            </a>
        </td>
        <td class="p-1 border-t border-t-gray-500">
            { docRow.Title }
        </td>
        <td class="p-1 border-t border-t-gray-500">
            { maybeBlankText(docRow.Description) }
        </td>
        if withAuthor {
            <td class="p-1 border-t border-t-gray-500">
                @accountName(docRow.Author, "")
            </td>
        }
    </tr>
}

templ docList(head string, docRows []*DocRow, withAuthor bool) {
    <div class="text-lg mb-1">
        { head }
    </div>
    <div class="px-2">
        <table class="w-full table-auto">
            <thead>
                <tr class="italic">
                    <td class="py-1 pr-2">ID</td>
                    <td class="py-1 pr-2">Title</td>
                    <td class="py-1 pr-2">Description</td>
                    if withAuthor {
                        <td class="py-1">Author</td>
                    }
                </tr>
            </thead>
            <tbody class="">
                if len(docRows) > 0 {
                    for _, row := range docRows {
                        @docListRow(row, withAuthor)
                    }
                } else {
                    {{
                        colspan := "3"
                        if withAuthor {
                            colspan = "4"
                        }
                    }}
                    <td colspan={ colspan } class="p-1 text-center border-t border-t-gray-500">No data</td>
                }
            </tbody>
        </table>
    </div>
}
