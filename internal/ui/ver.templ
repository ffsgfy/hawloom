package ui

import (
    "fmt"

    "github.com/google/uuid"

    "github.com/ffsgfy/hawloom/internal/db"
)

templ verSelIDField(verID *uuid.UUID) {
    {{
        value := ""
        if verID != nil {
            value = verID.String()
        }
    }}

    <input type="text" id="ver-sel-id" name="ver-id" class="hidden" hx-swap-oob="true" value={ value }/>
}

templ VerVoteUnvoteButton(verID uuid.UUID, hasVote bool) {
    {{
        var url, buttonText string
        if hasVote {
            url = fmt.Sprintf("/ver/%v/unvote", verID)
            buttonText = "Unvote"
        } else {
            url = fmt.Sprintf("/ver/%v/vote", verID)
            buttonText = "Vote"
        }
    }}

    <span hx-post={ url } class="underline hover:cursor-pointer">{ buttonText }</span>
}

templ VerFragment(ver *db.Ver, author string, vote int) {
    @verDetails(ver, author, vote)
    @docViewContent("selected", ver.Content)
    @verSelIDField(&ver.ID)
}

templ verDetails(ver *db.Ver, author string, vote int) {
    <div class="grid grid-cols-[max-content_1fr] gap-x-4 gap-y-1 text-sm pl-4 border-l border-l-gray-500">
        <span>Version:</span>
        <span>{ formatUUID(ver.ID, false) }</span>

        <span>Author:</span>
        @accountName(author, "")

        <span>Summary:</span>
        <div class="whitespace-pre-line break-word">{ maybeBlankText(ver.Summary) }</div>

        <span>Votes:</span>
        <div class="flex flex-row">
            { fmt.Sprintf("%d", ver.Votes) }
            <span class="flex-1"/>
            if ver.VordNum < 0 && vote >= 0 {
                @VerVoteUnvoteButton(ver.ID, vote > 0)
            }
        </div>
    </div>
}

templ verDetailsContainer(curVer *db.Ver, curVerAuthor string, selVer *uuid.UUID) {
    <div id="ver" class="hidden">
        @formPad()
        <div id="ver-cur">
            @verDetails(curVer, curVerAuthor, -1)
        </div>
        <div id="ver-sel" class="hidden">
            if selVer != nil {
                <div hx-get={ fmt.Sprintf("/ver/%v", *selVer) } hx-target="#ver-sel" hx-trigger="load"/>
            }
        </div>
    </div>
}

type VerRow struct {
	ID      uuid.UUID
	Author  string
	Summary string
	Votes   string
    HasVote bool
}

templ verListRow(verRow *VerRow) {
    <tr class="align-top">
        <td class="p-1 border-t border-t-gray-500">
            <span hx-get={ fmt.Sprintf("/ver/%v", verRow.ID) } hx-target="#ver-sel" hx-replace-url={ fmt.Sprintf("?ver=%v", verRow.ID) } class="hover:cursor-pointer">
                { formatUUID(verRow.ID, true) }
            </span>
        </td>
        <td class="p-1 border-t border-t-gray-500">
            @accountName(verRow.Author, "")
        </td>
        <td class="p-1 border-t border-t-gray-500">
            { maybeBlankText(verRow.Summary) }
        </td>
        <td class="p-1 border-t border-t-gray-500">
            <span if verRow.HasVote { class="underline" }>
                { verRow.Votes }
            </span>
        </td>
    </tr>
}

templ VerList(verRows []*VerRow) {
    <table class="w-full table-auto">
        <thead>
            <tr class="text-sm italic">
                <td class="py-1 pr-2">ID</td>
                <td class="py-1 pr-2">Author</td>
                <td class="py-1 pr-2">Summary</td>
                <td class="py-1">Votes</td>
            </tr>
        </thead>
        <tbody class="text-sm">
            if len(verRows) > 0 {
                for _, row := range verRows {
                    @verListRow(row)
                }
            } else {
                <td colspan="4" class="p-1 text-center border-t border-t-gray-500">No data</td>
            }
        </tbody>
    </table>
}

templ verListStub() {
    <div id="ver-list" class="px-2">
        @VerList(nil)
    </div>
}

templ verListHead() {
    @formPad()
    <div hx-get="/ver/list" hx-include="body" hx-target="#ver-list" hx-trigger="click, load" class="mb-1 hover:cursor-pointer">
        Versions
    </div>
}
