// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vote.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countVoters = `-- name: CountVoters :one
SELECT COUNT(DISTINCT account) AS voters FROM vote
WHERE doc = $1 AND vord_num = $2
`

// Assumes vord is locked
func (q *Queries) CountVoters(ctx context.Context, doc uuid.UUID, vordNum int32) (int64, error) {
	row := q.db.QueryRow(ctx, countVoters, doc, vordNum)
	var voters int64
	err := row.Scan(&voters)
	return voters, err
}

const countVotes = `-- name: CountVotes :many
SELECT ver, COUNT(*) AS votes FROM vote
WHERE doc = $1 AND vote.vord_num = $2
GROUP BY ver
`

type CountVotesRow struct {
	Ver   uuid.UUID `db:"ver"`
	Votes int64     `db:"votes"`
}

func (q *Queries) CountVotes(ctx context.Context, doc uuid.UUID, vordNum int32) ([]*CountVotesRow, error) {
	rows, err := q.db.Query(ctx, countVotes, doc, vordNum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*CountVotesRow
	for rows.Next() {
		var i CountVotesRow
		if err := rows.Scan(&i.Ver, &i.Votes); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createVote = `-- name: CreateVote :exec
INSERT INTO vote (ver, doc, vord_num, account)
VALUES ($1, $2, $3, $4)
`

type CreateVoteParams struct {
	Ver     uuid.UUID `db:"ver"`
	Doc     uuid.UUID `db:"doc"`
	VordNum int32     `db:"vord_num"`
	Account int32     `db:"account"`
}

func (q *Queries) CreateVote(ctx context.Context, arg *CreateVoteParams) error {
	_, err := q.db.Exec(ctx, createVote,
		arg.Ver,
		arg.Doc,
		arg.VordNum,
		arg.Account,
	)
	return err
}

const deleteVote = `-- name: DeleteVote :exec
DELETE FROM vote WHERE ver = $1 AND account = $2
`

func (q *Queries) DeleteVote(ctx context.Context, ver uuid.UUID, account int32) error {
	_, err := q.db.Exec(ctx, deleteVote, ver, account)
	return err
}

const findVoteForDelete = `-- name: FindVoteForDelete :one
SELECT vote.ver, vote.doc, vote.vord_num, vote.account FROM vote
    JOIN vord ON vord.doc = vote.doc AND vord.num = vote.vord_num
WHERE vote.ver = $1 AND vote.account = $2
FOR SHARE OF vord
`

func (q *Queries) FindVoteForDelete(ctx context.Context, ver uuid.UUID, account int32) (*Vote, error) {
	row := q.db.QueryRow(ctx, findVoteForDelete, ver, account)
	var i Vote
	err := row.Scan(
		&i.Ver,
		&i.Doc,
		&i.VordNum,
		&i.Account,
	)
	return &i, err
}
