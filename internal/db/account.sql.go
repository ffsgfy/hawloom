// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (name, password_hash)
VALUES ($1, $2)
ON CONFLICT (name) DO NOTHING
RETURNING id
`

type CreateAccountParams struct {
	Name         string `db:"name"`
	PasswordHash []byte `db:"password_hash"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg *CreateAccountParams) (int32, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Name, arg.PasswordHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findAccountByID = `-- name: FindAccountByID :one
SELECT id, name, created_at, password_hash FROM account WHERE id = $1
`

func (q *Queries) FindAccountByID(ctx context.Context, id int32) (*Account, error) {
	row := q.db.QueryRow(ctx, findAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.PasswordHash,
	)
	return &i, err
}

const findAccountByName = `-- name: FindAccountByName :one
SELECT id, name, created_at, password_hash FROM account WHERE name = $1
`

func (q *Queries) FindAccountByName(ctx context.Context, name string) (*Account, error) {
	row := q.db.QueryRow(ctx, findAccountByName, name)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.PasswordHash,
	)
	return &i, err
}
