// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: doc.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDoc = `-- name: CreateDoc :one
INSERT INTO doc (id, title, description, flags, created_by, vord_duration)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, description, flags, created_by, created_at, vord_duration
`

type CreateDocParams struct {
	ID           uuid.UUID `db:"id"`
	Title        string    `db:"title"`
	Description  string    `db:"description"`
	Flags        int32     `db:"flags"`
	CreatedBy    int32     `db:"created_by"`
	VordDuration int32     `db:"vord_duration"`
}

func (q *Queries) CreateDoc(ctx context.Context, arg *CreateDocParams) (*Doc, error) {
	row := q.db.QueryRow(ctx, createDoc,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Flags,
		arg.CreatedBy,
		arg.VordDuration,
	)
	var i Doc
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Flags,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.VordDuration,
	)
	return &i, err
}

const deleteDoc = `-- name: DeleteDoc :exec
DELETE FROM doc WHERE id = $1
`

func (q *Queries) DeleteDoc(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDoc, id)
	return err
}

const findAllPublicDocList = `-- name: FindAllPublicDocList :many
SELECT doc.id, doc.title, doc.description, doc.flags, doc.created_by, doc.created_at, doc.vord_duration, account.name AS author
FROM doc
    JOIN account ON account.id = doc.created_by
WHERE doc.flags & 1 = 1 -- DocFlagPublic
ORDER BY doc.created_at DESC
`

type FindAllPublicDocListRow struct {
	ID           uuid.UUID `db:"id"`
	Title        string    `db:"title"`
	Description  string    `db:"description"`
	Flags        int32     `db:"flags"`
	CreatedBy    int32     `db:"created_by"`
	CreatedAt    time.Time `db:"created_at"`
	VordDuration int32     `db:"vord_duration"`
	Author       string    `db:"author"`
}

func (q *Queries) FindAllPublicDocList(ctx context.Context) ([]*FindAllPublicDocListRow, error) {
	rows, err := q.db.Query(ctx, findAllPublicDocList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindAllPublicDocListRow
	for rows.Next() {
		var i FindAllPublicDocListRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Flags,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.VordDuration,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDoc = `-- name: FindDoc :one
SELECT id, title, description, flags, created_by, created_at, vord_duration FROM doc WHERE id = $1
`

func (q *Queries) FindDoc(ctx context.Context, id uuid.UUID) (*Doc, error) {
	row := q.db.QueryRow(ctx, findDoc, id)
	var i Doc
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Flags,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.VordDuration,
	)
	return &i, err
}

const findDocList = `-- name: FindDocList :many
SELECT id, title, description, flags, created_by, created_at, vord_duration FROM doc
WHERE created_by = $1
ORDER BY created_at DESC
`

func (q *Queries) FindDocList(ctx context.Context, createdBy int32) ([]*Doc, error) {
	rows, err := q.db.Query(ctx, findDocList, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Doc
	for rows.Next() {
		var i Doc
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Flags,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.VordDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPublicDocList = `-- name: FindPublicDocList :many
SELECT id, title, description, flags, created_by, created_at, vord_duration FROM doc
WHERE created_by = $1
    AND doc.flags & 1 = 1 -- DocFlagPublic
ORDER BY created_at DESC
`

func (q *Queries) FindPublicDocList(ctx context.Context, createdBy int32) ([]*Doc, error) {
	rows, err := q.db.Query(ctx, findPublicDocList, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Doc
	for rows.Next() {
		var i Doc
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Flags,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.VordDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
