// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key.sql

package db

import (
	"context"
)

const createKey = `-- name: CreateKey :one
INSERT INTO key (data) VALUES ($1) RETURNING id, created_at, data
`

func (q *Queries) CreateKey(ctx context.Context, data []byte) (*Key, error) {
	row := q.db.QueryRow(ctx, createKey, data)
	var i Key
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Data)
	return &i, err
}

const findKeys = `-- name: FindKeys :many
SELECT id, created_at, data FROM key
`

func (q *Queries) FindKeys(ctx context.Context) ([]*Key, error) {
	rows, err := q.db.Query(ctx, findKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
